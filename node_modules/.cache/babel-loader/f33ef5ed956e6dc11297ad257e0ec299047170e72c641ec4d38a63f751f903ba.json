{"ast":null,"code":"var _jsxFileName = \"/home/bryan-c/Documents/pokedex-app/src/components/PokemonData/PokedexEntry.js\";\nimport React from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function PokedexEntry(_ref) {\n  let {\n    species\n  } = _ref;\n  const encounteredGames = [];\n  let previousDescription = \"\";\n  const sanitizeText = text => {\n    // Remove control characters, special symbols, and zero-width space\n    const cleanedText = text.replace(/[\\u0000-\\u001F\\u007F-\\u009F]|[\\uD800-\\uDFFF]|[\\u200B-\\u200D\\uFEFF]/g, \"\");\n\n    // Replace repeated non-alphanumeric characters with a single space\n    const sanitizedText = cleanedText.replace(/([^A-Za-z0-9])+/g, \" \");\n    return sanitizedText;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Pokedex Entry\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 7\n    }, this), species && species.flavor_text_entries.map((entry, index) => {\n      if (entry.language.name === \"en\" && !encounteredGames.includes(entry.version.name)) {\n        encounteredGames.push(entry.version.name);\n        const sanitizedDescription = sanitizeText(entry.flavor_text);\n        if (sanitizedDescription !== previousDescription) {\n          previousDescription = sanitizedDescription;\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n              children: entry.version.name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 32,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: sanitizedDescription\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 33,\n              columnNumber: 19\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 31,\n            columnNumber: 17\n          }, this);\n        }\n      }\n      return null;\n    })]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 18,\n    columnNumber: 5\n  }, this);\n}\n_c = PokedexEntry;\nvar _c;\n$RefreshReg$(_c, \"PokedexEntry\");","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","PokedexEntry","_ref","species","encounteredGames","previousDescription","sanitizeText","text","cleanedText","replace","sanitizedText","children","fileName","_jsxFileName","lineNumber","columnNumber","flavor_text_entries","map","entry","index","language","name","includes","version","push","sanitizedDescription","flavor_text","_c","$RefreshReg$"],"sources":["/home/bryan-c/Documents/pokedex-app/src/components/PokemonData/PokedexEntry.js"],"sourcesContent":["import React from \"react\";\n\nexport default function PokedexEntry({ species }) {\n  const encounteredGames = [];\n  let previousDescription = \"\";\n\n  const sanitizeText = (text) => {\n    // Remove control characters, special symbols, and zero-width space\n    const cleanedText = text.replace(/[\\u0000-\\u001F\\u007F-\\u009F]|[\\uD800-\\uDFFF]|[\\u200B-\\u200D\\uFEFF]/g, \"\");\n\n    // Replace repeated non-alphanumeric characters with a single space\n    const sanitizedText = cleanedText.replace(/([^A-Za-z0-9])+/g, \" \");\n\n    return sanitizedText;\n  };\n\n  return (\n    <div>\n      <h2>Pokedex Entry</h2>\n      {species &&\n        species.flavor_text_entries.map((entry, index) => {\n          if (\n            entry.language.name === \"en\" &&\n            !encounteredGames.includes(entry.version.name)\n          ) {\n            encounteredGames.push(entry.version.name);\n            const sanitizedDescription = sanitizeText(entry.flavor_text);\n            if (sanitizedDescription !== previousDescription) {\n              previousDescription = sanitizedDescription;\n              return (\n                <div key={index}>\n                  <h3>{entry.version.name}</h3>\n                  <p>{sanitizedDescription}</p>\n                </div>\n              );\n            }\n          }\n          return null;\n        })}\n    </div>\n  );\n}\n\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,eAAe,SAASC,YAAYA,CAAAC,IAAA,EAAc;EAAA,IAAb;IAAEC;EAAQ,CAAC,GAAAD,IAAA;EAC9C,MAAME,gBAAgB,GAAG,EAAE;EAC3B,IAAIC,mBAAmB,GAAG,EAAE;EAE5B,MAAMC,YAAY,GAAIC,IAAI,IAAK;IAC7B;IACA,MAAMC,WAAW,GAAGD,IAAI,CAACE,OAAO,CAAC,qEAAqE,EAAE,EAAE,CAAC;;IAE3G;IACA,MAAMC,aAAa,GAAGF,WAAW,CAACC,OAAO,CAAC,kBAAkB,EAAE,GAAG,CAAC;IAElE,OAAOC,aAAa;EACtB,CAAC;EAED,oBACEV,OAAA;IAAAW,QAAA,gBACEX,OAAA;MAAAW,QAAA,EAAI;IAAa;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,EACrBZ,OAAO,IACNA,OAAO,CAACa,mBAAmB,CAACC,GAAG,CAAC,CAACC,KAAK,EAAEC,KAAK,KAAK;MAChD,IACED,KAAK,CAACE,QAAQ,CAACC,IAAI,KAAK,IAAI,IAC5B,CAACjB,gBAAgB,CAACkB,QAAQ,CAACJ,KAAK,CAACK,OAAO,CAACF,IAAI,CAAC,EAC9C;QACAjB,gBAAgB,CAACoB,IAAI,CAACN,KAAK,CAACK,OAAO,CAACF,IAAI,CAAC;QACzC,MAAMI,oBAAoB,GAAGnB,YAAY,CAACY,KAAK,CAACQ,WAAW,CAAC;QAC5D,IAAID,oBAAoB,KAAKpB,mBAAmB,EAAE;UAChDA,mBAAmB,GAAGoB,oBAAoB;UAC1C,oBACEzB,OAAA;YAAAW,QAAA,gBACEX,OAAA;cAAAW,QAAA,EAAKO,KAAK,CAACK,OAAO,CAACF;YAAI;cAAAT,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAK,CAAC,eAC7Bf,OAAA;cAAAW,QAAA,EAAIc;YAAoB;cAAAb,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAI,CAAC;UAAA,GAFrBI,KAAK;YAAAP,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAGV,CAAC;QAEV;MACF;MACA,OAAO,IAAI;IACb,CAAC,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACD,CAAC;AAEV;AAACY,EAAA,GAvCuB1B,YAAY;AAAA,IAAA0B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}